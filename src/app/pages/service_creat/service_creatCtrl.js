/** * Created by sorcerer on 2017/10/31. */(function () {    'use strict';    angular.module('BlurAdmin.pages.servicecreat')        .controller('servicecreatCtrl', servicecreatCtrl);    /** @ngInject */    function servicecreatCtrl(toastr, serviceCreatLoad, serviceCreatValidate, serviceCreatUpdate, serviceCreatDelete, serviceCreatCreat, serviceCreatPrepare, $stateParams, updatadc, GLOBAL, Cookie, $rootScope, $scope, servicecreattemplate) {        //console.log('updatadc', updatadc);        $scope.updata = false;        $rootScope.namespace = Cookie.get('namespace');        $scope.portsArr = [];        $scope.err = {            servicename: false        }        $scope.envs = [];        $scope.switch = {            elastic: false,            route: false,            quota: false        };        $scope.checked = {            configChange: true,            port: null,            cname: '系统域名',            host: '',            tlsset: 'none',            httpset: 'None',            zsfile: {key: '请选择证书', value: ''},            syfile: {key: '请选择证书', value: ''},            cafile: {key: '请选择证书', value: ''},            mcafile: {key: '请选择证书', value: ''},            suffix: '.' + $rootScope.namespace + GLOBAL.service_url        }        $scope.quota = {            cpu: {                request: {                    cpuunit: 'millcores',                    cpuquota: null                },                limit: {                    cpuunit: 'millcores',                    cpuquota: null                }            },            memory: {                request: {                    memoryunit: 'MB',                    memoryquota: null                },                limit: {                    memoryunit: 'MB',                    memoryquota: null                }            }        }        $scope.tlsset = {            setone: ['none', 'edge', 'passthrough', 're-encrypt'],            httpset: ['None', 'Allow', 'Redirect']        }        $scope.containerTpl = angular.copy(servicecreattemplate.containerTpl);        $scope.horiz = angular.copy(servicecreattemplate.horiz);        $scope.service = angular.copy(servicecreattemplate.service);        $scope.route = angular.copy(servicecreattemplate.route);        if ($stateParams.name) {            $scope.updata = true;            $scope.creattext = '更新'            $scope.dc = angular.copy(updatadc);            loadDc($scope.dc)        } else {            $scope.creattext = '创建'            $scope.dc = angular.copy(servicecreattemplate.dc);        }        $scope.gotoadvan = function () {            $scope.nettap = $scope.nettap === '基本设置' ? '高级设置' : '基本设置';            if (!$scope.checked.port) {                $scope.checked.port = $scope.portsArr[0].containerPort + '(TCP)'            }        }        $scope.$watch('switch', function (n, o) {            if (n === o) {                return            }            if (n) {                if (n.elastic !== o.elastic) {                    $scope.switch.quota = true;                }                if (n.route !== o.route) {                    if (n.route) {                        if ($scope.portsArr[0] && $scope.portsArr[0].containerPort) {                        } else {                            $scope.switch.route = false;                            toastr.error('至少要添加一个端口', '路由错误')                        }                    }                }            }        }, true)        function loadDc(dc) {            serviceCreatLoad.loadBasic(dc);            loadAdvantage($scope.quota, $scope.portsArr, $scope.switch, $scope.checked, dc);        }        function loadAdvantage(quota, portsArr, switchs, checked, dc) {            serviceCreatLoad.loadRoute(switchs, checked, dc, function (data) {                $scope.route = data;            });            serviceCreatLoad.loadServe(portsArr, dc, function (data) {                $scope.service = data;            });            serviceCreatLoad.loadHor(switchs, dc, function (data) {                $scope.horiz = data;            });            $scope.envs = serviceCreatLoad.loadenvs(dc);            serviceCreatLoad.loadQuota(quota, switchs, dc);            $scope.checked.configChange = serviceCreatLoad.LoadConfigchange(dc);        }        $scope.createDc = function () {            var dc = angular.copy($scope.dc);            if (!serviceCreatValidate.valid($scope.checked,$scope.portsArr, $scope.err, $scope.switch, $scope.quota, $scope.envs, dc)) {                return            }            serviceCreatPrepare.prepareVolume(dc);            serviceCreatPrepare.prepareQuota(dc, $scope.switch.quota, $scope.quota);            serviceCreatPrepare.prepareimageChange(dc);            serviceCreatPrepare.prepareDc(dc);            serviceCreatPrepare.prepareTrigger(dc, $scope.checked.configChange);            serviceCreatPrepare.prepareEnv(dc, $scope.envs);            if ($scope.portsArr[0]) {                serviceCreatPrepare.prepareService(dc, $scope.service, $scope.portsArr)                if ($scope.service.metadata.resourceVersion) {                    serviceCreatUpdate.updataseervice($scope.service);                } else {                    serviceCreatCreat.createService($scope.service);                }            } else {                serviceCreatDelete.deleService(dc);            }            if ($scope.switch.elastic) {                serviceCreatPrepare.prepareHoriz(dc, $scope.horiz);                if ($scope.horiz.metadata.resourceVersion) {                    serviceCreatUpdate.updatahor($scope.horiz);                } else {                    serviceCreatCreat.createHoriz($scope.horiz);                }            } else {                serviceCreatDelete.delHor(dc)            }            if ($scope.switch.route) {                serviceCreatPrepare.prepareRoute($scope.route, dc, $scope.checked);                if ($scope.route.metadata.resourceVersion) {                    serviceCreatUpdate.updataroute($scope.route);                } else {                    serviceCreatCreat.createRoute($scope.route);                }            } else {                serviceCreatDelete.deleRoute(dc);            }            if (dc.metadata.resourceVersion) {                serviceCreatUpdate.updateDc(dc);            } else {                serviceCreatCreat.createDc(dc);            }        };    }})();