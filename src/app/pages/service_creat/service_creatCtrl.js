/** * Created by sorcerer on 2017/10/31. */(function () {    'use strict';    angular.module('BlurAdmin.pages.servicecreat')        .controller('servicecreatCtrl', servicecreatCtrl);    /** @ngInject */    function servicecreatCtrl(toastr,GLOBAL, $log, Cookie, $rootScope, $scope, Service, Route, horizontalpodautoscalers, DeploymentConfig, $state, servicecreattemplate) {        $rootScope.namespace = Cookie.get('namespace');        $scope.portsArr = [];        $scope.envs = [];        $scope.dc = angular.copy(servicecreattemplate.dc)        $scope.containerTpl = angular.copy(servicecreattemplate.containerTpl)        $scope.horiz = angular.copy(servicecreattemplate.horiz)        $scope.service = angular.copy(servicecreattemplate.service)        $scope.route = angular.copy(servicecreattemplate.route)        $scope.switch = {            elastic: false,            route: false,            quota:false        };        $scope.checked = {            configChange:true,            port: null,            cname: '系统域名',            host: '',            tlsset: 'None',            httpset: 'None',            zsfile: {key: '请选择证书', value: ''},            syfile: {key: '请选择证书', value: ''},            cafile: {key: '请选择证书', value: ''},            mcafile: {key: '请选择证书', value: ''},            suffix: '.' + $rootScope.namespace + GLOBAL.service_url        }        $scope.quota = {            cpu: {                request: {                    cpuunit: 'millcores',                    cpuquota: null                },                limit: {                    cpuunit: 'millcores',                    cpuquota: null                }            },            memory: {                request: {                    memoryunit: 'MB',                    memoryquota: null                },                limit: {                    memoryunit: 'MB',                    memoryquota: null                }            }        }        $scope.tlsset = {            setone: ['None', 'Edge', 'Passthrough', 'Re-encrypt'],            httpset: ['None', 'Allow', 'Redirect']        }        $scope.gotoadvan = function () {            $scope.nettap = $scope.nettap === '基本设置' ? '高级设置' : '基本设置';            $scope.checked.port = $scope.portsArr[0].containerPort + '(TCP)'        }        $scope.$watch('switch.elastic', function (n,o) {            if (n === o) {                return            }            if (n) {                $scope.switch.quota=true;            }        })        function prepareService(service, dc) {            service.metadata.name = dc.metadata.name;            service.metadata.labels.app = dc.metadata.name;            service.spec.selector.app = dc.metadata.name;            service.spec.selector.deploymentconfig = dc.metadata.name;        };        function createService(dc) {            prepareService($scope.service, dc);            var ps = [];            if ($scope.portsArr) {                var ports = $scope.portsArr;                for (var j = 0; j < ports.length; j++) {                    if (ports[j].hostPort) {                        var val = ports[j].protocol.toUpperCase()                        ps.push({                            name: ports[j].hostPort + '-' + ports[j].protocol.toLowerCase(),                            port: parseInt(ports[j].hostPort),                            protocol: val,                            targetPort: parseInt(ports[j].containerPort)                        });                    }                }            }            if (ps.length > 0) {                $scope.service.spec.ports = ps;            } else {                $scope.service.spec.ports = null;            }            Service.create({                namespace: $rootScope.namespace,                region: $rootScope.region            }, $scope.service, function (res) {                $scope.service = res;            }, function (res) {                $log.info("create service fail", res);            });        };        function imageChange(dc){            for (var i = 0; i < dc.spec.template.spec.containers.length; i++) {                if (dc.spec.template.spec.containers[i].isimageChange) {                    dc.spec.triggers.push(dc.spec.template.spec.containers[i].triggerImageTpl)                }            }        }        function prepareRoute(route, service) {            route.metadata.name = service.metadata.name;            route.metadata.labels.app = service.metadata.name;            route.spec.host = $scope.checked.host + $scope.checked.suffix;            route.spec.to.name = service.metadata.name;            route.spec.port.targetPort = $scope.checked.port + '-tcp';        };        function createRoute(service) {            prepareRoute($scope.route, service);            if ($scope.checked.tlsset == 'Passthrough') {                $scope.route.spec.tls.termination = $scope.checked.tlsset;            } else if ($scope.checked.tlsset == 'Edge') {                $scope.route.spec.tls.termination = $scope.checked.tlsset;                $scope.route.spec.tls.insecureEdgeTerminationPolicy = $scope.checked.httpset;                if ($scope.checked.zsfile.value) {                    $scope.route.spec.tls.certificate = $scope.checked.zsfile.value                }                if ($scope.checked.syfile.value) {                    $scope.route.spec.tls.key = $scope.checked.syfile.value                }                if ($scope.checked.cafile.value) {                    $scope.route.spec.tls.caCertificate = $scope.checked.cafile.value                }            } else if ($scope.checked.tlsset == 'Re-encrypt') {                $scope.route.spec.tls.termination = $scope.checked.tlsset;                if ($scope.checked.zsfile.value) {                    $scope.route.spec.tls.certificate = $scope.checked.zsfile.value                }                if ($scope.checked.syfile.key) {                    $scope.route.spec.tls.key = $scope.checked.syfile.value                }                if ($scope.checked.cafile.value) {                    $scope.route.spec.tls.caCertificate = $scope.checked.cafile.value                }                if ($scope.checked.mcafile.value) {                    $scope.route.spec.tls.destinationCACertificate = $scope.checked.mcafile.value                }            } else {                delete $scope.route.spec.tls            }            Route.create({                namespace: $rootScope.namespace            }, $scope.route, function (res) {                $log.info("create route success", res);                $scope.route = res;            }, function (res) {                $log.info("create route fail", res);            });        };        function createHoriz(){            horizontalpodautoscalers.create({namespace: $rootScope.namespace}, $scope.horiz, function (data) {            })        }        function prepareDc(dc) {            var name = dc.metadata.name;            dc.metadata.labels.app = name;            dc.spec.selector.app = name;            dc.spec.selector.deploymentconfig = name;            dc.spec.template.metadata.labels.app = name;            dc.spec.template.metadata.labels.deploymentconfig = name;        };        function prepareVolume(dc) {            var containers = dc.spec.template.spec.containers;            for (var i = 0; i < containers.length; i++) {                var container = containers[i];                if (container.volumeMounts && container.volumeMounts.length == 0) {                    delete container["volumeMounts"];                }            }            if (dc.spec.template.spec.volumes.length == 0) {                delete dc.spec.template.spec["volumes"];            }        };        function prepareTrigger(dc) {            if ($scope.checked.configChange) {                dc.spec.triggers.push({type: 'ConfigChange'});            }        };        function prepareHoriz(dc){            var name = dc.metadata.name;            $scope.horiz.metadata.name = name;            $scope.horiz.metadata.labels.app = name;            $scope.horiz.spec.scaleTargetRef.name = name;            $scope.horiz.spec.minReplicas = dc.spec.replicas;            $scope.horiz.spec.maxReplicas = parseInt($scope.horiz.spec.maxReplicas)||dc.spec.replicas;            $scope.horiz.spec.targetCPUUtilizationPercentage = parseInt($scope.horiz.spec.targetCPUUtilizationPercentage)||80;        }        function prepareEnv(dc) {            var containers = dc.spec.template.spec.containers;            var reg = new RegExp(/^[a-zA-Z_]+[a-zA-Z0-9_]*$/gi);            for (var i = 0; i < containers.length; i++) {                var thisenv = angular.copy($scope.envs);                for (var k = 0; k < $scope.envs.length; k++) {                    if (!$scope.envs[k].name) {                        thisenv.splice(k, 1);                    }                }                containers[i].env = thisenv;                for (var j = 0; j < containers[i].env.length; j++) {                    if (reg.test(containers[i].env[j].name) == false) {                        $scope.checkEnv = true;                        return false;                    }                }            }        };        function geshihuan(unit, num) {            if (!num) {            }            if (unit === 'millcores') {                return num ? parseFloat(num) + 'm' : false;            } else if (unit === 'cores') {                return num ? parseFloat(num) : false;            } else if (unit === 'MB') {                return num ? parseFloat(num) + 'Mi' : false;            } else if (unit === 'GB') {                return num ? parseFloat(num) + 'Gi' : false;            }        }        function prepareQuota(){            if ($scope.switch.quota) {                angular.forEach($scope.dc.spec.template.spec.containers, function (ports, i) {                    $scope.dc.spec.template.spec.containers[i].resources.requests.cpu = geshihuan($scope.quota.cpu.request.cpuunit, $scope.quota.cpu.request.cpuquota)                    $scope.dc.spec.template.spec.containers[i].resources.limits.cpu = geshihuan($scope.quota.cpu.limit.cpuunit, $scope.quota.cpu.limit.cpuquota)                    $scope.dc.spec.template.spec.containers[i].resources.requests.memory = geshihuan($scope.quota.memory.request.memoryunit, $scope.quota.memory.request.memoryquota)                    $scope.dc.spec.template.spec.containers[i].resources.limits.memory = geshihuan($scope.quota.memory.limit.memoryunit, $scope.quota.memory.limit.memoryquota)                    if ($scope.dc.spec.template.spec.containers[i].resources.requests.cpu===false) {                        //alert(1)                        delete $scope.dc.spec.template.spec.containers[i].resources.requests.cpu                    }                    if($scope.dc.spec.template.spec.containers[i].resources.requests.memory===false){                        //alert(1)                        delete $scope.dc.spec.template.spec.containers[i].resources.requests.memory                    }                    if ($scope.dc.spec.template.spec.containers[i].resources.limits.cpu===false) {                        delete $scope.dc.spec.template.spec.containers[i].resources.limits.cpu;                    }                    if($scope.dc.spec.template.spec.containers[i].resources.limits.memory===false){                        delete $scope.dc.spec.template.spec.containers[i].resources.limits.memory;                    }                    if (JSON.stringify($scope.dc.spec.template.spec.containers[i].resources.limits) == "{}") {                        delete $scope.dc.spec.template.spec.containers[i].resources.limits                    }                    if (JSON.stringify($scope.dc.spec.template.spec.containers[i].resources.requests) == "{}") {                        delete $scope.dc.spec.template.spec.containers[i].resources.requests                    }                    if (JSON.stringify($scope.dc.spec.template.spec.containers[i].resources) == "{}") {                        delete $scope.dc.spec.template.spec.containers[i].resources                    }                })            }else {                angular.forEach($scope.dc.spec.template.spec.containers, function (ports, i) {                    delete $scope.dc.spec.template.spec.containers[i].resources                })            }        }        function deleService() {            Service.delete({                namespace: $rootScope.namespace,                name: $scope.dc.metadata.name            }, function (res) {            })        }        function deleRoute() {            Route.delete({                namespace: $rootScope.namespace,                name: $scope.dc.metadata.name            }, function (res) {            })        }        function valid(){            if ($scope.switch.quota) {                if ($scope.quota.cpu.request.cpuquota && $scope.quota.cpu.limit.cpuquota) {                } else {                    toastr.error('请输入正确的cpu配额', '配额错误')                    return false                }            }            for (var i = 0; i < $scope.envs.length; i++) {                if ($scope.envs[i].name == '' || $scope.envs[i].value == '') {                    toastr.error('请输入正确的环境变量', '环境变量错误')                    return false;                }            }            return true        }        $scope.createDc = function () {            var dc = angular.copy($scope.dc);            if (!valid()) {                return            }            prepareQuota()            imageChange(dc)            prepareDc(dc);            //prepareVolume(dc);            prepareTrigger(dc);            prepareEnv(dc);            deleService();            deleRoute();            if ($scope.portsArr[0]) {                createService(dc);            };            if ($scope.switch.elastic) {                prepareHoriz(dc)                createHoriz()            }            if ($scope.switch.route) {                createRoute(dc);            }            function createDcfn() {                DeploymentConfig.create({                    namespace: $rootScope.namespace                }, dc, function (res) {                    $state.go('service_detil', {name: dc.metadata.name});                }, function (res) {                    toastr.error('参数错误', '创建DC失败')                });            }            createDcfn();        };    }})();