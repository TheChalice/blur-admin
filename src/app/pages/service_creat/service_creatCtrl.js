/** * Created by sorcerer on 2017/10/31. */(function () {    'use strict';    angular.module('BlurAdmin.pages.servicecreat')        .controller('servicecreatCtrl', servicecreatCtrl);    /** @ngInject */    function servicecreatCtrl(serviceCreatValidate,serviceCreatUpdate, serviceCreatDelete, serviceCreatCreat, serviceCreatPrepare, $stateParams, updatadc, toastr, GLOBAL, $log, Cookie, $rootScope, $scope, Service, Route, horizontalpodautoscalers, DeploymentConfig, $state, servicecreattemplate) {        console.log('updatadc', updatadc);        $scope.updata = false;        $rootScope.namespace = Cookie.get('namespace');        $scope.portsArr = [];        $scope.envs = [];        $scope.switch = {            elastic: false,            route: false,            quota: false        };        $scope.checked = {            configChange: true,            port: null,            cname: '系统域名',            host: '',            tlsset: 'none',            httpset: 'None',            zsfile: {key: '请选择证书', value: ''},            syfile: {key: '请选择证书', value: ''},            cafile: {key: '请选择证书', value: ''},            mcafile: {key: '请选择证书', value: ''},            suffix: '.' + $rootScope.namespace + GLOBAL.service_url        }        $scope.quota = {            cpu: {                request: {                    cpuunit: 'millcores',                    cpuquota: null                },                limit: {                    cpuunit: 'millcores',                    cpuquota: null                }            },            memory: {                request: {                    memoryunit: 'MB',                    memoryquota: null                },                limit: {                    memoryunit: 'MB',                    memoryquota: null                }            }        }        $scope.tlsset = {            setone: ['none', 'edge', 'passthrough', 're-encrypt'],            httpset: ['None', 'Allow', 'Redirect']        }        $scope.containerTpl = angular.copy(servicecreattemplate.containerTpl);        $scope.horiz = angular.copy(servicecreattemplate.horiz);        $scope.service = angular.copy(servicecreattemplate.service);        $scope.route = angular.copy(servicecreattemplate.route);        if ($stateParams.name) {            $scope.updata = true;            $scope.creattext = '更新'            $scope.dc = angular.copy(updatadc);            loadDc($scope.dc)        } else {            $scope.creattext = '创建'            $scope.dc = angular.copy(servicecreattemplate.dc);        }        $scope.gotoadvan = function () {            $scope.nettap = $scope.nettap === '基本设置' ? '高级设置' : '基本设置';            if (!$scope.checked.port) {                $scope.checked.port = $scope.portsArr[0].containerPort + '(TCP)'            }        }        $scope.$watch('switch.elastic', function (n, o) {            if (n === o) {                return            }            if (n) {                $scope.switch.quota = true;            }        })        function loadDc(dc) {            updataBasic(dc);            updataAdvantage(dc);        }        function updataAdvantage(dc) {            loadRoute()            loadServe()            $scope.envs = dc.spec.template.spec.containers[0].env || [];            loadHor(dc)            loadQuota(dc)            $scope.checked.configChange = false;            angular.forEach(dc.spec.triggers, function (trigger, i) {                if (trigger) {                    if (trigger.type && trigger.type === 'ConfigChange') {                        $scope.checked.configChange = true;                    }                }            })        }        function loadHor(dc) {            horizontalpodautoscalers.get({namespace: $rootScope.namespace, name: dc.metadata.name}, function (hor) {                //console.log('hor', hor);                $scope.switch.elastic = true;                $scope.horiz = hor;            })        }        function loadQuota(dc) {            if (dc.spec.template.spec.containers[0].resources && dc.spec.template.spec.containers[0].resources.requests) {                $scope.switch.quota = true;                if (dc.spec.template.spec.containers[0].resources.requests.cpu) {                    $scope.quota.cpu.request.cpuunit = ungeshihuan(dc.spec.template.spec.containers[0].resources.requests.cpu).unit                    $scope.quota.cpu.request.cpuquota = ungeshihuan(dc.spec.template.spec.containers[0].resources.requests.cpu).nums                }                if (dc.spec.template.spec.containers[0].resources.requests.memory) {                    $scope.quota.memory.request.memoryunit = ungeshihuan(dc.spec.template.spec.containers[0].resources.requests.memory).unit                    $scope.quota.memory.request.memoryquota = ungeshihuan(dc.spec.template.spec.containers[0].resources.requests.memory).nums                }                if (dc.spec.template.spec.containers[0].resources.limits.cpu) {                    $scope.quota.cpu.limit.cpuunit = ungeshihuan(dc.spec.template.spec.containers[0].resources.limits.cpu).unit                    $scope.quota.cpu.limit.cpuquota = ungeshihuan(dc.spec.template.spec.containers[0].resources.limits.cpu).nums                }                if (dc.spec.template.spec.containers[0].resources.limits.memory) {                    $scope.quota.memory.limit.memoryunit = ungeshihuan(dc.spec.template.spec.containers[0].resources.limits.memory).unit                    $scope.quota.memory.limit.memoryquota = ungeshihuan(dc.spec.template.spec.containers[0].resources.limits.memory).nums                }            } else {                angular.forEach(dc.spec.template.spec.containers, function (con, i) {                    con.resources = {                        "limits": {                            "cpu": null,                            "memory": null                        },                        "requests": {                            "cpu": null,                            "memory": null                        }                    }                })            }        }        function loadRoute() {            Route.get({namespace: $rootScope.namespace, name: $scope.dc.metadata.name}, function (res) {                $scope.switch.route = true;                $scope.route = res;                $scope.checked.port = res.spec.port.targetPort.split('-')[0];                $scope.checked.host = res.spec.host.split('.')[0];                if ($scope.route.spec.tls) {                    if ($scope.route.spec.tls.termination) {                        $scope.checked.tlsset = $scope.route.spec.tls.termination;                    }                    if ($scope.route.spec.tls.insecureEdgeTerminationPolicy) {                        $scope.checked.httpset = $scope.route.spec.tls.insecureEdgeTerminationPolicy                    }                    if (res.spec.tls.certificate) {                        $scope.checked.zsfile = {                            value: res.spec.tls.certificate,                            key: '证书.crt'                        }                    }                    if (res.spec.tls.key) {                        $scope.checked.syfile = {                            value: res.spec.tls.key,                            key: '密钥.crt'                        }                    }                    if (res.spec.tls.caCertificate) {                        $scope.checked.cafile = {                            value: res.spec.tls.caCertificate,                            key: 'ca证书.crt'                        }                    }                    if (res.spec.tls.destinationCACertificate) {                        $scope.checked.mcafile = {                            value: res.spec.tls.destinationCACertificate,                            key: '目标ca证书.crt'                        }                    }                } else {                    $scope.route.spec.tls = {};                }            })        }        function loadServe() {            Service.get({namespace: $rootScope.namespace, name: $scope.dc.metadata.name}, function (res) {                $scope.service = res                //$scope.portsArr=res.spec.ports                angular.forEach(res.spec.ports, function (port, i) {                    $scope.portsArr.unshift({                        containerPort: port.targetPort,                        protocol: port.protocol,                        hostPort: port.targetPort,                    })                })            })        }        function ungeshihuan(num) {            var unit = '';            var nums = '';            $scope.quota.doquota = true;            //console.log(num.indexOf('Mi')>-1);            if (num.indexOf('Mi') > -1) {                unit = 'MB';                nums = parseFloat(num.replace('Mi', ""))            } else if (num.indexOf('m') > -1) {                unit = 'millcores';                nums = parseFloat(num.replace('m', ""))            } else if (num.indexOf('Gi') > -1) {                unit = 'GB';                nums = parseFloat(num.replace('Gi', ""))            } else {                unit = 'cores';                nums = parseFloat(num)            }            return {                unit: unit,                nums: nums            }        }        function updataBasic(dc) {            angular.forEach(dc.spec.template.spec.containers, function (con, i) {                if (con.volumeMounts && con.volumeMounts.length > 0) {                    con.advanconfg = true                } else {                    con.advanconfg = false                }                con.secretsobj = {                    secretarr: [],                    configmap: [],                    persistentarr: []                }                angular.forEach(con.volumeMounts, function (volue, k) {                    if (volue.name.indexOf('secrat') > -1) {                        loadvol(volue, 'secret', 'secretName', 'secretarr', dc, con)                    } else if (volue.name.indexOf('config') > -1) {                        loadvol(volue, 'configMap', 'name', 'configmap', dc, con)                    } else if (volue.name.indexOf('persistent') > -1) {                        loadvol(volue, 'persistentVolumeClaim', 'claimName', 'persistentarr', dc, con)                    }                })                loadimage(dc, con)            })        }        function loadimage(dc, con) {            var fullname = ''            if (con.image.indexOf('registry.dataos.io') > -1) {                fullname = con.image.split('/')[con.image.split('/').length - 1];            } else if (con.image.split('/')[2].split('@')[1].split(':')[0] === 'sha256') {                for (var k in dc.metadata.annotations) {                    if (k.indexOf('dadafoundry.io/image-') > -1) {                        fullname = dc.metadata.annotations[k];                    }                }            }            con.imagename = fullname.split(':')[0];            con.tag = fullname.split(':')[1];        }        function loadvol(volue, key, keyname, volarr, dc, con) {            angular.forEach(dc.spec.template.spec.volumes, function (vol, j) {                if (volue.name === vol.name) {                    var modelvol = {mountPath: volue.mountPath};                    modelvol[key] = {};                    modelvol[key][keyname] = vol[key][keyname];                    con.secretsobj[volarr].push(modelvol)                }            })        }        $scope.createDc = function () {            var dc = angular.copy($scope.dc);            if (!serviceCreatValidate.valid($scope.switch,$scope.quota,$scope.envs)) {                return            }            serviceCreatPrepare.prepareVolume(dc);            serviceCreatPrepare.prepareQuota(dc, $scope.switch.quota, $scope.quota);            serviceCreatPrepare.prepareimageChange(dc);            serviceCreatPrepare.prepareDc(dc);            serviceCreatPrepare.prepareTrigger(dc, $scope.checked.configChange);            serviceCreatPrepare.prepareEnv(dc, $scope.envs);            if ($scope.portsArr[0]) {                serviceCreatPrepare.prepareService(dc, $scope.service, $scope.portsArr)                if ($scope.service.metadata.resourceVersion) {                    serviceCreatUpdate.updataseervice($scope.service);                } else {                    serviceCreatCreat.createService($scope.service);                }            } else {                serviceCreatDelete.deleService(dc);            }            if ($scope.switch.elastic) {                serviceCreatPrepare.prepareHoriz(dc, $scope.horiz);                if ($scope.horiz.metadata.resourceVersion) {                    serviceCreatUpdate.updatahor($scope.horiz);                } else {                    serviceCreatCreat.createHoriz($scope.horiz);                }            } else {                serviceCreatDelete.delHor(dc)            }            if ($scope.switch.route) {                serviceCreatPrepare.prepareRoute($scope.route, dc, $scope.checked);                if ($scope.route.metadata.resourceVersion) {                    serviceCreatUpdate.updataroute($scope.route);                } else {                    serviceCreatCreat.createRoute($scope.route);                }            } else {                serviceCreatDelete.deleRoute(dc);            }            if (dc.metadata.resourceVersion) {                serviceCreatUpdate.updateDc(dc);            } else {                serviceCreatCreat.createDc(dc);            }        };    }})();