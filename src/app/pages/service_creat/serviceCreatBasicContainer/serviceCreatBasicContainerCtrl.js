/** * Created by sorcerer on 2017/11/3. */(function () {    'use strict';    angular.module('BlurAdmin.pages.servicecreat')        .controller('serviceCreatBasicContainerCtrl', serviceCreatBasicContainerCtrl);    /** @ngInject */    function serviceCreatBasicContainerCtrl($scope,ImageSelect,GLOBAL) {        $scope.rmContainer = function (idx) {            $scope.dc.spec.template.spec.containers.splice(idx, 1);        };        $scope.selectImage= function (idx) {            ImageSelect.open().then(function (image) {                //console.log('res', image.metadata.name);                var container=$scope.dc.spec.template.spec.containers[idx];                var imagename=image.metadata.name.split(':')[0];                var tagname=image.metadata.name.split(':')[1];                var conname=$scope.dc.spec.template.spec.containers[idx].name;                var imagetag = '';                container.imagename=imagename;                container.tag=tagname;                container.name=conname?conname:imagename;                container.triggerImageTpl = {                    "type": "ImageChange",                    "imageChangeParams": {                        "automatic": true,                        "containerNames": [                            container.name                        ],                        "from": {                            "kind": "ImageStreamTag",                            "name": image.metadata.name  //ruby-hello-world:latest                        }                    }                };                imagetag='dadafoundry.io/image-' + container.name;                $scope.dc.metadata.annotations[imagetag] = image.metadata.name;                if (image.ispublicimage) {                    //公共                    container.image = GLOBAL.common_url + '/' + image.metadata.name;                }else {                    //私有                    container.image = image.image.dockerImageReference;                    if (image.image.dockerImageMetadata.Config.Labels) {                        container.ref = image.image.dockerImageMetadata.Config.Labels['io.openshift.build.commit.ref'];                        container.commitId = image.image.dockerImageMetadata.Config.Labels['io.openshift.build.commit.id'];                    }                }            })        }    }})();