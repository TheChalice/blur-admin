/** * @author v.lugovsky * created on 16.12.2015 */(function () {    'use strict';    angular.module('BlurAdmin.pages.secretDetail')        .controller('secretDetailCtrl', secretDetailCtrl);    /** @ngInject */    function secretDetailCtrl(Confirm,toastr,$base64,$state, $http, $scope, $rootScope, listSecret, modifySecret, deleteSecret, $stateParams,Cookie) {        $scope.grid = {            status: false,        }        // 获取详情        listSecret.get({namespace: Cookie.get('namespace'), name: $stateParams.name}, function (res) {            $scope.item = res;            $scope.item.secretarr = [];            $scope.item.newarr = [];            //$scope.item.change = false;            $scope.change = false;            angular.forEach(res.data, function (res, i) {                $scope.item.secretarr.push({key: i, value: res,showLog:false});            });            console.log($scope.item);        },function(err){        })        $scope.getLog= function (idx) {            $scope.item.secretarr[idx].showLog=!$scope.item.secretarr[idx].showLog;        }        $scope.addSecret = function () {            $scope.item.newarr.push({key: '', value: ''});        }        $scope.$watch('item', function (n, o) {            if (n == o) {                return            }            var kong = false;            var r = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;            if (!$scope.change) {                $scope.change = true;                return            } else {                $scope.grid.keychongfu = false;                $scope.grid.keynull = false;                $scope.grid.keybuhefa = false;                if (n.secretarr||n.newarr) {                    if (n.secretarr.length>0||n.newarr.length>0) {                        var arr = n.secretarr.concat(n.newarr);                        // arr.sort(by.open("key"));                        angular.forEach(arr, function (item, i) {                            if (!item.key || !item.value) {                                kong = true                            }else {                                if (arr[i] && arr[i + 1]) {                                    if (arr[i].key == arr[i + 1].key) {                                        $scope.grid.keychongfu = true;                                        kong = true;                                    }                                }                                if (!r.test(arr[i].key)) {                                    $scope.grid.keybuhefa = true;                                    kong = true;                                }                            }                        })                        if (!kong) {                            $scope.grid.status = true                        } else {                            $scope.grid.status = false                        }                    }else {                        $scope.grid.status = false                    }                }            }        }, true);        $scope.getLog= function (idx) {            console.log($scope.item.secretarr[idx].showLog);            $scope.item.secretarr[idx].showLog=!$scope.item.secretarr[idx].showLog        }        $scope.deletekv = function (idx) {            $scope.item.secretarr.splice(idx, 1);        };        $scope.rmsecret = function (idx) {            $scope.item.newarr.splice(idx, 1);        }        $scope.updateSecret = function () {            $scope.item.data={}            if ($scope.item.secretarr) {                var arr = $scope.item.secretarr.concat($scope.item.newarr);            }else {                var arr = $scope.item.newarr.concat($scope.item.secretarr);            }            angular.forEach(arr, function (item,i) {                $scope.item.data[item.key] = $base64.encode(item.value);            });            delete $scope.item.secretarr;            delete $scope.item.newarr;            modifySecret.update({                namespace: Cookie.get('namespace'),                name: $stateParams.name            }, $scope.item, function (res) {                toastr.success('保存成功');                $state.go('resourceMgm', {index: 3})            },function (err) {                toastr.error('保存失败')            })        }        $scope.delete = function () {            Confirm.open("删除密钥", "您确定要删除密钥吗？", "密钥已经挂载在容器中，删除此密钥，容器启动将异常", "stop").then(function(){                deleteSecret.delete({namespace: Cookie.get('namespace'),name:$scope.item.metadata.name}, function () {                    toastr.success('删除密钥成功');                    $state.go('resourceMgm', {index: 3})                },function (err) {                    toastr.error('删除密钥失败');                    // Confirm.open("删除密钥", "删除密钥失败", "持久化卷已经挂载在容器中，您需要先停止服务，         卸载持久化卷后，才能删除。", null,true)                })            })        }    }})();