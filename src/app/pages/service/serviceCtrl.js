/** * Created by sorcerer on 2017/10/24. */(function () {    'use strict';    angular.module('BlurAdmin.pages.service')        .controller('serviceCtrl', serviceCtrl);    /** @ngInject */    function serviceCtrl(Cookie,$log,$scope,dcs,$rootScope,Route,ReplicationController,Ws) {        $rootScope.namespace=Cookie.get('namespace');        //console.log('$rootScope.namespace', $rootScope.namespace);        //console.log('dcs', dcs);        $scope.data = angular.copy(dcs);        var watchRcs = function (resourceVersion) {            Ws.watch({                api: 'k8s',                resourceVersion: resourceVersion,                namespace: $rootScope.namespace,                type: 'replicationcontrollers',                name: ''            }, function (res) {                var data = JSON.parse(res.data);                updateRcs(data);            }, function () {                $log.info("webSocket start");            }, function () {                $log.info("webSocket stop");                var key = Ws.key($rootScope.namespace, 'replicationcontrollers', '');                if (!$rootScope.watches[key] || $rootScope.watches[key].shouldClose) {                    return;                }                //watchRcs($scope.resourceVersion);            });        };        var updateRcs = function (data) {            if (data.type == 'ERROR') {                $log.info("err", data.object.message);                Ws.clear();                //serviceList();                return;            }            // if (data.type == 'DELETE') {            //            // }            $scope.resourceVersion = data.object.metadata.resourceVersion;            if (data.type == 'ADDED') {                //$scope.rcs.items.shift(data.object);            } else if (data.type == "MODIFIED") {                for (var k = 0; k < $scope.items.length; k++) {                    //data.object.metadata.name.split('-')[0]                    //console.log($scope.items[k].metadata.name, data.object.metadata.name.split('-')[0]);                    //if (data.object.spec.selector.deploymentconfig == $scope.items[k].metadata.name) {                    //    ////console.log(data.object.status);                    //    //$scope.items[k].spec.replicas = data.object.spec.replicas                    //    //$scope.items[k].status.replicas =data.object.status.replicas                    //    //$scope.$apply()                    //}                }            }        }        Route.get({namespace: $rootScope.namespace, region: $rootScope.region}, function (route) {            //$log.info("Route", data);            $scope.routeMap = {};            var labelSelector = '';            for (var i = 0; i < route.items.length; i++) {                $scope.routeMap[route.items[i].spec.to.name] = route.items[i];                if (route.items[i].spec.tls) {                    route.items[i].spec.host='https://'+route.items[i].spec.host                }else {                    route.items[i].spec.host='http://'+route.items[i].spec.host                }            }            labelSelector = 'openshift.io/deployment-config.name in (';            angular.forEach($scope.data.items, function (dc,i) {                if ($scope.routeMap[dc.metadata.name]) {                    $scope.data.items[i].route= $scope.routeMap[dc.metadata.name]                }                if ($scope.data.items.length > 0) {                    labelSelector += dc.metadata.name + ','                }            })            labelSelector = labelSelector.substring(0, labelSelector.length - 1) + ')';            if (!$scope.data.items.length) {                labelSelector = '';            }            ReplicationController.get({                namespace: $rootScope.namespace,                labelSelector: labelSelector            }, function (rcs) {                console.log("Replicationcontrollers", rcs);                $scope.rcs = rcs;                $scope.rcMap = {};                for (var i = 0; i < rcs.items.length; i++) {                    $scope.rcMap[rcs.items[i].metadata.name] = rcs.items[i];                }                for (var i = 0; i < $scope.data.items.length; i++) {                    var cTt = $scope.data.items[i].metadata.name + '-' + $scope.data.items[i].status.latestVersion;                    console.log('cTt', cTt);                    $scope.data.items[i].rc = $scope.rcMap[cTt];                }                $scope.resourceVersion = rcs.metadata.resourceVersion;                //isNormal(items);                watchRcs(rcs.metadata.resourceVersion);                console.log('$scope.data', $scope.data);                //watchBuilds(data.metadata.resourceVersion);            });        });    }})();