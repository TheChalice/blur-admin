/** * @author v.lugovsky * created on 16.12.2015 */(function () {    'use strict';    angular.module('BlurAdmin.pages.resourceMgm')        .controller('resourceMgmCtrl', resourceMgmCtrl);    /** @ngInject */    function resourceMgmCtrl($log,Ws,DeploymentConfig, persistent, $state, $rootScope, $scope, configmaps, secretskey,Cookie) {        $scope.grid = {            page: 1,            size: 1,            txt: ''        };        $scope.secrets = {            page: 1,            size: 1,            txt: ''        };        if ($state.params.index) {            console.log($state.params.index);            $scope.check = $state.params.index        } else {            $scope.check = false        }        $scope.$watch('grid.rmpage', function (newVal, oldVal) {            if (newVal === oldVal) {                return            }            if (newVal !== oldVal) {                rmrefresh(newVal);            }        });        var rmrefresh = function (page) {            $(document.body).animate({                scrollTop: 0            }, 200);            var skip = (page - 1) * $scope.grid.size;            $scope.persistents = $scope.persistentdata.slice(skip, skip + $scope.grid.size)||[];        };        $scope.constantlyvolume = function () {            $scope.grid.constantlyvolume = true;            persistentlist('nows');            $state.reload();        }        function persistentlist(nows) {            persistent.get({                namespace:  Cookie.get('namespace')            }, function (res) {                angular.forEach(res.items, function (item, i) {                    //console.log(item.spec.resources.requests.storage);                    res.items[i].spec.resources.requests.storage=item.spec.resources.requests.storage.replace('i','B')                })                DeploymentConfig.get({                    namespace: Cookie.get('namespace')                }, function (resdc) {                    console.log('dc',resdc);                    $scope.grid.constantlyvolume = false;                    console.log(res.items, 1);                    angular.forEach(res.items, function (volitem, i) {                        res.items[i].arr = []                        angular.forEach(resdc.items, function (dcitem, k) {                            angular.forEach(dcitem.spec.template.spec.volumes, function (dcvolitem, j) {                                if (dcvolitem.persistentVolumeClaim && volitem.metadata.name == dcvolitem.persistentVolumeClaim.claimName) {                                    res.items[i].arr.push(dcitem.metadata.name)                                }                            })                        })                    });                    if (res.items && res.items.length > 0) {                        angular.forEach(res.items, function (item, i) {                            if (item.arr.length > 0) {                                res.items[i].status.phase = 'band'                            }                            res.items[i].sorttime = (new Date(item.metadata.creationTimestamp)).getTime()                        })                        res.items.sort(function (x, y) {                            return x.sorttime > y.sorttime ? -1 : 1;                        });                        $scope.resourceVersion = res.metadata.resourceVersion;                        if (!nows) {                            watchPc(res.metadata.resourceVersion);                        }                        //物理刷新不重启ws                        $scope.persistentdata = res.items;                    }else {                        $scope.persistentdata=[];                    }                    $scope.grid.rmtotal = $scope.persistentdata.length;                    $scope.cpoypersistents = angular.copy($scope.persistentdata)                    $scope.grid.rmpage = 1;                    $scope.grid.rmtxt = '';                    rmrefresh(1);                })            }, function (err) {            });        }        persistentlist()        var watchPc = function (resourceVersion) {            Ws.watch({                api: 'k8s',                resourceVersion: resourceVersion,                namespace:  Cookie.get('namespace'),                type: 'persistentvolumeclaims',                name: ''            }, function (res) {                var data = JSON.parse(res.data);                updatePC(data);                //console.log(data);            }, function () {                $log.info("webSocket start");            }, function () {                $log.info("webSocket stop");                var key = Ws.key( Cookie.get('namespace'), 'persistentvolumeclaims', '');                if (!$rootScope.watches[key] || $rootScope.watches[key].shouldClose) {                    return;                }                watchPc($scope.resourceVersion);            });        };        var updatePC = function (data) {            if (data.type == 'ERROR') {                $log.info("err", data.object.message);                Ws.clear();                persistentlist();                return;            }            $scope.resourceVersion = data.object.metadata.resourceVersion;            if (data.type == 'ADDED') {            } else if (data.type == "MODIFIED") {                data.object.spec.resources.requests.storage=data.object.spec.resources.requests.storage.replace('i','B')                angular.forEach($scope.persistentdata, function (item, i) {                    if (item.metadata.name == data.object.metadata.name) {                        $scope.persistentdata[i] = data.object;                        rmrefresh(1);                        $scope.$apply();                    }                })            }        }        $scope.text='您还没有创建持久化卷';        $scope.rmsearch = function (event) {            if (true) {                if (!$scope.grid.rmtxt) {                    $scope.persistentdata = angular.copy($scope.cpoypersistents)                    rmrefresh(1);                    $scope.grid.rmtotal = $scope.cpoypersistents.length;                    return;                }                $scope.persistentdata = [];                var iarr = [];                var str = $scope.grid.rmtxt;                str = str.toLocaleLowerCase();                angular.forEach($scope.cpoypersistents, function (item, i) {                    var nstr = item.metadata.name;                    nstr = nstr.toLocaleLowerCase();                    if (nstr.indexOf(str) !== -1) {                        iarr.push(item)                    }                    //console.log(repo.instance_data, $scope.grid.txt);                })                if(iarr.length===0){                    $scope.isQuery=true;                    $scope.text='没有查询到相关数据';                }                else{                    $scope.text='您还没有创建持久化卷';                }                $scope.persistentdata=angular.copy(iarr);                rmrefresh(1);                $scope.grid.rmtotal = $scope.persistentdata.length;            }        };        ////////////////  配置卷        $scope.$watch('grid.page', function (newVal, oldVal) {            if (newVal != oldVal) {                refresh(newVal);            }        });        var refresh = function (page) {            $(document.body).animate({                scrollTop: 0            }, 200);            var skip = (page - 1) * $scope.grid.size;            $scope.configitems = $scope.configdata.slice(skip, skip + $scope.grid.size)||[];        };        $scope.$on('$destroy', function () {            Ws.clear();        });        $scope.loadconfigmaps = function () {            configmaps.get({namespace:  Cookie.get('namespace')}, function (res) {                //console.log(res);                if (res.items && res.items.length > 0) {                    angular.forEach(res.items, function (item, i) {                        res.items[i].sorttime = (new Date(item.metadata.creationTimestamp)).getTime()                    })                    //console.log($scope.items);                    res.items.sort(function (x, y) {                        return x.sorttime > y.sorttime ? -1 : 1;                    });                    if (!res.items) {                        $scope.configdata = [];                    } else {                        $scope.configdata = res.items;                    }                    $scope.copyconfigdata = angular.copy($scope.configdata)                    $scope.grid.total = $scope.configdata.length;                    $scope.grid.page = 1;                    $scope.grid.txt = '';                    refresh(1);                }            })        }        $scope.newreload=function(){            $state.go('resourceMgm',{index:2},{reload:true});            // console.log('nima');        }        $scope.text2='您还没有创建配置卷';        $scope.search = function (event) {            if (true) {                if (!$scope.grid.txt) {                    $scope.configdata = angular.copy($scope.copyconfigdata)                    refresh(1);                    $scope.grid.total = $scope.configdata.length;                    return;                }                $scope.configdata = [];                var iarr = [];                var str = $scope.grid.txt;                str = str.toLocaleLowerCase();                angular.forEach($scope.copyconfigdata, function (item, i) {                    var nstr = item.metadata.name;                    nstr = nstr.toLocaleLowerCase();                    if (nstr.indexOf(str) !== -1) {                        iarr.push(item)                    }                })                if(iarr.length===0){                    $scope.isQuery=true;                    $scope.text2='没有查询到相关数据';                }                else{                    $scope.text2='您还没有创建配置卷';                }                $scope.configdata=angular.copy(iarr);                refresh(1);                $scope.grid.total = $scope.configdata.length;            }        };        $scope.loadconfigmaps();        //////////////////////////密钥        $scope.loadsecrets = function () {            secretskey.get({namespace:  Cookie.get('namespace')}, function (res) {                if (res.items && res.items.length > 0) {                    angular.forEach(res.items, function (item, i) {                        res.items[i].sorttime = (new Date(item.metadata.creationTimestamp)).getTime()                    })                    res.items.sort(function (x, y) {                        return x.sorttime > y.sorttime ? -1 : 1;                    });                    if (res.items) {                        $scope.secretdata = res.items;                    } else {                        $scope.secretdata = []                    }                    $scope.copysecretdata = angular.copy($scope.secretdata);                    $scope.secrets.total = $scope.secretdata.length;                    $scope.secrets.page = 1;                    $scope.secrets.txt = '';                    secretrefresh(1);                }            })        }        $scope.secretReload=function(){            $state.go('resourceMgm',{index:3},{reload:true})        }        $scope.loadsecrets();        $scope.$watch('secrets.page', function (newVal, oldVal) {            if (newVal != oldVal) {                secretrefresh(newVal);            }        });        var secretrefresh = function (page) {            $(document.body).animate({                scrollTop: 0            }, 200);            var skip = (page - 1) * $scope.grid.size;            $scope.secretitems = $scope.secretdata.slice(skip, skip + $scope.secrets.size)||[];        };        $scope.text3=' 您还没有创建密钥';        $scope.scretssearch = function (event) {            if (true) {                if (!$scope.secrets.txt) {                    $scope.secretdata = angular.copy($scope.copysecretdata);                    secretrefresh(1);                    $scope.secrets.total = $scope.secretdata.length;                    return;                }                $scope.secretdata = [];                var iarr = [];                var str = $scope.secrets.txt;                str = str.toLocaleLowerCase();                angular.forEach($scope.copysecretdata, function (item, i) {                    var nstr = item.metadata.name;                    nstr = nstr.toLocaleLowerCase();                    if (nstr.indexOf(str) !== -1) {                        iarr.push(item)                    }                })                if(iarr.length===0){                    $scope.text3='没有查询到相关数据';                }                else{                    $scope.text3='您还没有创建密钥';                }                $scope.secretdata=angular.copy(iarr);                secretrefresh(1);                console.log('$scope.data', $scope.secretdata);                $scope.secrets.total = $scope.secretdata.length;            }        };    }})();